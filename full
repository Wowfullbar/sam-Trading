//@version=6
strategy("Gatillo 2.0 - MS", overlay=true, max_boxes_count=500, max_labels_count=500)

if not array.includes(array.from("1", "5"), timeframe.period)
    runtime.error("Solo funciona en 1 y 5 minutos")

max_display = input.int(30, "Max Elementos", minval=1, maxval=500)
fvg_duration = input.int(20, "Duración FVG (min)", minval=5, maxval=100)
confluence_timeout = input.int(30, "Tiempo límite confluencia (min)", minval=10, maxval=120)
stop_loss_multiplier = input.float(1.0, "Multiplicador Stop Loss", minval=0.1, maxval=5.0, step=0.1)
tp_multiplier = input.float(1.0, "Multiplicador TP (x Stop Loss)", minval=0.5, maxval=5.0, step=0.5)
risk_input = input.float(5.0, "Riesgo por Operación", minval=0.1, maxval=100.0, step=0.1)
risk_amount = risk_input * 10

current_tf = timeframe.period
higher_tf = current_tf == "1" ? "5" : "15"
is_1m = timeframe.period == "1"

high_htf = request.security(syminfo.tickerid, higher_tf, high)
low_htf = request.security(syminfo.tickerid, higher_tf, low)
close_htf = request.security(syminfo.tickerid, higher_tf, close)
open_htf = request.security(syminfo.tickerid, higher_tf, open)
high_htf_prev2 = request.security(syminfo.tickerid, higher_tf, high[2])
low_htf_prev2 = request.security(syminfo.tickerid, higher_tf, low[2])

high_15m = is_1m ? request.security(syminfo.tickerid, "15", high) : na
low_15m = is_1m ? request.security(syminfo.tickerid, "15", low) : na
close_15m = is_1m ? request.security(syminfo.tickerid, "15", close) : na
open_15m = is_1m ? request.security(syminfo.tickerid, "15", open) : na
high_15m_prev2 = is_1m ? request.security(syminfo.tickerid, "15", high[2]) : na
low_15m_prev2 = is_1m ? request.security(syminfo.tickerid, "15", low[2]) : na

high_1h = request.security(syminfo.tickerid, "60", high)
low_1h = request.security(syminfo.tickerid, "60", low)
close_1h = request.security(syminfo.tickerid, "60", close)
open_1h = request.security(syminfo.tickerid, "60", open)
high_1h_prev2 = request.security(syminfo.tickerid, "60", high[2])
low_1h_prev2 = request.security(syminfo.tickerid, "60", low[2])

var fvg_tops = array.new<float>()
var fvg_bottoms = array.new<float>()
var fvg_bullish = array.new<bool>()
var fvg_timeframes = array.new<string>()
var fvg_bar_indices = array.new<int>()
var fvg_invalidated = array.new<bool>()
var confluence_zones = array.new<box>()
var fvg_boxes = array.new<box>()
var ms_labels = array.new<label>()
var confluence_fvg_counts = array.new<int>()
var tp_boxes = array.new<box>()
var sl_boxes = array.new<box>()

var confluence_counter = 0
var last_confluence_bar = 0
max_1m_fvgs = 5

var bool buy_signal = false
var bool sell_signal = false
var bool pending_buy = false
var bool pending_sell = false
var float ms_level = na
var bool ms_bullish = false
var int ms_bar = 0
var float current_tp = na
var float current_sl = na
var int entry_bar = 0
var bool position_active = false
var float confluence_zone_top = na
var float confluence_zone_bottom = na
var int confluence_start_bar = 0

var array<float> swing_highs_1m = array.new<float>()
var array<float> swing_lows_1m = array.new<float>()
var array<int> swing_high_bars_1m = array.new<int>()
var array<int> swing_low_bars_1m = array.new<int>()

get_bars_from_minutes(minutes) => math.round(minutes / (timeframe.period == "1" ? 1 : 5))

create_fvg(is_bullish, top, bottom, tf_text) =>
    array.push(fvg_tops, top)
    array.push(fvg_bottoms, bottom)
    array.push(fvg_bullish, is_bullish)
    array.push(fvg_timeframes, tf_text)
    array.push(fvg_bar_indices, bar_index)
    array.push(fvg_invalidated, false)

remove_fvg(index) =>
    array.remove(fvg_tops, index)
    array.remove(fvg_bottoms, index)
    array.remove(fvg_bullish, index)
    array.remove(fvg_timeframes, index)
    array.remove(fvg_bar_indices, index)
    array.remove(fvg_invalidated, index)

// Función para verificar invalidación de FVGs
check_fvg_invalidation() =>
    if array.size(fvg_tops) > 0
        for i = 0 to array.size(fvg_tops) - 1
            if not array.get(fvg_invalidated, i)  // Solo verificar FVGs no invalidados
                fvg_top = array.get(fvg_tops, i)
                fvg_bottom = array.get(fvg_bottoms, i)
                is_bullish_fvg = array.get(fvg_bullish, i)
                
                // Un FVG bullish se invalida si el precio cierra por debajo del bottom
                // Un FVG bearish se invalida si el precio cierra por encima del top
                invalidated = false
                if is_bullish_fvg and close < fvg_bottom
                    invalidated := true
                else if not is_bullish_fvg and close > fvg_top
                    invalidated := true
                
                if invalidated
                    array.set(fvg_invalidated, i, true)

clean_fvgs() =>
    if array.size(fvg_tops) > 0
        count_1m = 0
        fvg_duration_bars = get_bars_from_minutes(fvg_duration)
        for i = array.size(fvg_tops) - 1 to 0
            fvg_age = bar_index - array.get(fvg_bar_indices, i)
            tf = array.get(fvg_timeframes, i)
            is_invalidated = array.get(fvg_invalidated, i)
            
            // Remover FVGs por tiempo O por invalidación
            if fvg_age > fvg_duration_bars or is_invalidated
                remove_fvg(i)
            else if tf == "1min"
                count_1m += 1
        if count_1m > max_1m_fvgs
            removed = 0
            for i = 0 to array.size(fvg_timeframes) - 1
                if array.get(fvg_timeframes, i) == "1min" and removed < (count_1m - max_1m_fvgs)
                    array.remove(fvg_tops, i)
                    array.remove(fvg_bottoms, i)
                    array.remove(fvg_bullish, i)
                    array.remove(fvg_timeframes, i)
                    array.remove(fvg_bar_indices, i)
                    array.remove(fvg_invalidated, i)
                    removed += 1
                    break

bull_gap_1h = high_1h_prev2 < low_1h and not na(high_1h_prev2) and not na(low_1h)
bear_gap_1h = low_1h_prev2 > high_1h and not na(low_1h_prev2) and not na(high_1h)
new_bar_1h = high_1h != high_1h[1] or low_1h != low_1h[1] or close_1h != close_1h[1]

if new_bar_1h and bull_gap_1h
    create_fvg(true, low_1h, high_1h_prev2, "1H")
if new_bar_1h and bear_gap_1h
    create_fvg(false, low_1h_prev2, high_1h, "1H")

if is_1m
    bull_gap_15m = high_15m_prev2 < low_15m and not na(high_15m_prev2) and not na(low_15m)
    bear_gap_15m = low_15m_prev2 > high_15m and not na(low_15m_prev2) and not na(high_15m)
    new_bar_15m = high_15m != high_15m[1] or low_15m != low_15m[1] or close_15m != close_15m[1]
    if new_bar_15m and bull_gap_15m
        create_fvg(true, low_15m, high_15m_prev2, "15min")
    if new_bar_15m and bear_gap_15m
        create_fvg(false, low_15m_prev2, high_15m, "15min")

bull_gap_htf = high_htf_prev2 < low_htf and not na(high_htf_prev2) and not na(low_htf)
bear_gap_htf = low_htf_prev2 > high_htf and not na(low_htf_prev2) and not na(high_htf)
new_bar_htf = high_htf != high_htf[1] or low_htf != low_htf[1] or close_htf != close_htf[1]
htf_label = is_1m ? "5min" : "15min"

if new_bar_htf and bull_gap_htf
    create_fvg(true, low_htf, high_htf_prev2, htf_label)
if new_bar_htf and bear_gap_htf
    create_fvg(false, low_htf_prev2, high_htf, htf_label)

bull_gap_current = high[2] < low[0] and not na(high[2]) and not na(low[0])
bear_gap_current = low[2] > high[0] and not na(low[2]) and not na(high[0])
current_tf_label = is_1m ? "1min" : "5min"

if bull_gap_current
    create_fvg(true, low[0], high[2], current_tf_label)
if bear_gap_current
    create_fvg(false, low[2], high[0], current_tf_label)

price_in_fvg(price_high, price_low, fvg_top, fvg_bottom) => price_high >= fvg_bottom and price_low <= fvg_top

create_fvg_boxes(participating_indices, conf_type) =>
    for i = 0 to array.size(participating_indices) - 1
        index = array.get(participating_indices, i)
        fvg_top = array.get(fvg_tops, index)
        fvg_bottom = array.get(fvg_bottoms, index)
        fvg_bar = array.get(fvg_bar_indices, index)
        tf_label = array.get(fvg_timeframes, index)
        is_bullish_fvg = array.get(fvg_bullish, index)
        box_color = is_bullish_fvg ? color.green : color.red
        text_size = tf_label == "15min" ? size.tiny : tf_label == "1H" ? size.normal : size.tiny
        fvg_duration_bars = get_bars_from_minutes(fvg_duration)
        fvg_box = box.new(fvg_bar - 2, fvg_top, fvg_bar + fvg_duration_bars - 2, fvg_bottom, border_color=color.new(box_color, 100), bgcolor=color.new(box_color, 85), border_width=0, text=tf_label, text_color=color.white, text_size=text_size)
        array.push(fvg_boxes, fvg_box)

clean_old_zones() =>
    while array.size(confluence_zones) > max_display
        if array.size(confluence_zones) > 0
            box.delete(array.shift(confluence_zones))
            if array.size(confluence_fvg_counts) > 0
                fvgs_to_remove = array.shift(confluence_fvg_counts)
                for i = 1 to fvgs_to_remove
                    if array.size(fvg_boxes) > 0
                        box.delete(array.shift(fvg_boxes))
    while array.size(ms_labels) > max_display
        if array.size(ms_labels) > 0
            label.delete(array.shift(ms_labels))
    while array.size(tp_boxes) > max_display
        if array.size(tp_boxes) > 0
            box.delete(array.shift(tp_boxes))
    while array.size(sl_boxes) > max_display
        if array.size(sl_boxes) > 0
            box.delete(array.shift(sl_boxes))

create_ms_label(swing_price, is_bullish_conf, swing_bar_index, label_type) =>
    label_text = label_type == "SL" ? "SL 1m" : "SH 1m"
    label_style = label_type == "SL" ? label.style_label_up : label.style_label_down
    ms_label = label.new(swing_bar_index, swing_price, label_text, style=label_style, color=color.orange, textcolor=color.white, size=size.normal)
    array.push(ms_labels, ms_label)

create_tp_sl_boxes(entry_price, take_profit, stop_loss, is_long) =>
    tp_box = box.new(bar_index, entry_price, bar_index, take_profit, border_color=color.green, bgcolor=color.new(color.green, 80), border_width=1)
    sl_box = box.new(bar_index, entry_price, bar_index, stop_loss, border_color=color.red, bgcolor=color.new(color.red, 80), border_width=1)
    array.push(tp_boxes, tp_box)
    array.push(sl_boxes, sl_box)

update_boxes_extension() =>
    if array.size(tp_boxes) > 0 and array.size(sl_boxes) > 0
        latest_tp = array.get(tp_boxes, array.size(tp_boxes) - 1)
        latest_sl = array.get(sl_boxes, array.size(sl_boxes) - 1)
        box.set_right(latest_tp, bar_index)
        box.set_right(latest_sl, bar_index)

// Función para encontrar el swing anterior al swing dado
find_previous_swing(target_swing_bar, is_looking_for_high) =>
    var float previous_swing_price = na
    var int previous_swing_bar = 0
    
    if is_1m
        if is_looking_for_high and array.size(swing_highs_1m) > 0
            // Buscar el swing high anterior al swing low dado
            for i = array.size(swing_high_bars_1m) - 1 to 0
                swing_bar = array.get(swing_high_bars_1m, i)
                if swing_bar < target_swing_bar
                    previous_swing_price := array.get(swing_highs_1m, i)
                    previous_swing_bar := swing_bar
                    break
        else if not is_looking_for_high and array.size(swing_lows_1m) > 0
            // Buscar el swing low anterior al swing high dado
            for i = array.size(swing_low_bars_1m) - 1 to 0
                swing_bar = array.get(swing_low_bars_1m, i)
                if swing_bar < target_swing_bar
                    previous_swing_price := array.get(swing_lows_1m, i)
                    previous_swing_bar := swing_bar
                    break
    
    [previous_swing_price, previous_swing_bar]

get_last_swing_and_previous(is_bullish_conf) =>
    var float last_swing_price = na
    var int last_swing_bar = 0
    var float activator_price = na
    var int activator_bar = 0
    var string activator_type = ""
    
    if is_1m
        if is_bullish_conf and array.size(swing_lows_1m) > 0
            // Para confluencia alcista: tomar último swing low
            last_swing_price := array.get(swing_lows_1m, array.size(swing_lows_1m) - 1)
            last_swing_bar := array.get(swing_low_bars_1m, array.size(swing_low_bars_1m) - 1)
            // Buscar el swing high anterior a este swing low
            [prev_price, prev_bar] = find_previous_swing(last_swing_bar, true)
            if not na(prev_price)
                activator_price := prev_price
                activator_bar := prev_bar
                activator_type := "SH"
        else if not is_bullish_conf and array.size(swing_highs_1m) > 0
            // Para confluencia bajista: tomar último swing high
            last_swing_price := array.get(swing_highs_1m, array.size(swing_highs_1m) - 1)
            last_swing_bar := array.get(swing_high_bars_1m, array.size(swing_high_bars_1m) - 1)
            // Buscar el swing low anterior a este swing high
            [prev_price, prev_bar] = find_previous_swing(last_swing_bar, false)
            if not na(prev_price)
                activator_price := prev_price
                activator_bar := prev_bar
                activator_type := "SL"
    
    [last_swing_price, last_swing_bar, activator_price, activator_bar, activator_type]

calculate_position_size(entry, stop_loss, risk_dollars) =>
    sl_distance = math.abs(entry - stop_loss)
    pip_value = syminfo.mintick * 10
    sl_pips = sl_distance / pip_value
    lot_size = risk_dollars / (sl_pips * 10)
    lot_size

if is_1m
    is_swing_high_1m = high[1] > high and high[1] > high[2]
    is_swing_low_1m = low[1] < low and low[1] < low[2]
    if is_swing_high_1m
        array.push(swing_highs_1m, high[1])
        array.push(swing_high_bars_1m, bar_index - 1)
        if array.size(swing_highs_1m) > 10
            array.shift(swing_highs_1m)
            array.shift(swing_high_bars_1m)
    if is_swing_low_1m
        array.push(swing_lows_1m, low[1])
        array.push(swing_low_bars_1m, bar_index - 1)
        if array.size(swing_lows_1m) > 10
            array.shift(swing_lows_1m)
            array.shift(swing_low_bars_1m)

// Verificar invalidación de FVGs en cada barra
check_fvg_invalidation()

clean_fvgs()

conf_detected = false
conf_type = ""
full_zone_top = 0.0
full_zone_bottom = 0.0
participating_indices = array.new<int>()

if array.size(fvg_tops) >= 2
    tf_5m = 0
    tf_15m = 0
    tf_1h = 0
    bull_count = 0
    bear_count = 0
    full_zone_top := low
    full_zone_bottom := high
    fvg_duration_bars = get_bars_from_minutes(fvg_duration)
    for i = 0 to array.size(fvg_tops) - 1
        fvg_age = bar_index - array.get(fvg_bar_indices, i)
        tf = array.get(fvg_timeframes, i)
        is_invalidated = array.get(fvg_invalidated, i)
        
        // Solo considerar FVGs válidos (no invalidados) para confluencias
        if fvg_age <= fvg_duration_bars and tf != "1min" and not is_invalidated and price_in_fvg(high, low, array.get(fvg_tops, i), array.get(fvg_bottoms, i))
            array.push(participating_indices, i)
            tf_5m := tf == "5min" ? tf_5m + 1 : tf_5m
            tf_15m := tf == "15min" ? tf_15m + 1 : tf_15m
            tf_1h := tf == "1H" ? tf_1h + 1 : tf_1h
            full_zone_top := math.max(full_zone_top, array.get(fvg_tops, i))
            full_zone_bottom := math.min(full_zone_bottom, array.get(fvg_bottoms, i))
            if array.get(fvg_bullish, i)
                bull_count += 1
            else
                bear_count += 1
    total_fvgs = tf_5m + tf_15m + tf_1h
    tfs_touching = (tf_5m > 0 ? 1 : 0) + (tf_15m > 0 ? 1 : 0) + (tf_1h > 0 ? 1 : 0)
    conf_type := bull_count > bear_count ? "ALCISTA" : bear_count > bull_count ? "BAJISTA" : "MIXTA"
    conf_detected := tfs_touching >= 2 and total_fvgs >= 2 and conf_type != "MIXTA" and full_zone_top > full_zone_bottom

buy_signal := false
sell_signal := false

// Verificar si la confluencia ha expirado
confluence_expired = false
if (pending_buy or pending_sell) and confluence_start_bar > 0
    confluence_age_bars = bar_index - confluence_start_bar
    confluence_timeout_bars = get_bars_from_minutes(confluence_timeout)
    if confluence_age_bars > confluence_timeout_bars
        confluence_expired = true
        pending_buy := false
        pending_sell := false

if conf_detected and bar_index - last_confluence_bar > 10
    confluence_counter += 1
    fvg_duration_bars = get_bars_from_minutes(fvg_duration)
    confluence_box = box.new(bar_index - 1, full_zone_top, bar_index + fvg_duration_bars, full_zone_bottom, border_color=color.purple, bgcolor=color.new(color.purple, 85), border_width=2)
    array.push(confluence_zones, confluence_box)
    confluence_zone_top := full_zone_top
    confluence_zone_bottom := full_zone_bottom
    confluence_start_bar := bar_index
    fvg_count = array.size(participating_indices)
    array.push(confluence_fvg_counts, fvg_count)
    create_fvg_boxes(participating_indices, conf_type)
    
    [last_swing_price, last_swing_bar, activator_price, activator_bar, activator_type] = get_last_swing_and_previous(conf_type == "ALCISTA")
    
    if not na(activator_price)
        ms_level := activator_price
        ms_bullish := conf_type == "ALCISTA"
        ms_bar := activator_bar
        create_ms_label(activator_price, conf_type == "ALCISTA", activator_bar, activator_type)
        if conf_type == "ALCISTA"
            pending_buy := true
            pending_sell := false
        else if conf_type == "BAJISTA"
            pending_sell := true
            pending_buy := false
    last_confluence_bar := bar_index

// Lógica de entrada para LONG (confluencia alcista)
if pending_buy and not na(ms_level) and ms_bullish and close > ms_level and not confluence_expired
    entry_price = close
    entry_bar := bar_index
    distance_to_box = math.abs(entry_price - confluence_zone_bottom)
    sl_distance = distance_to_box * stop_loss_multiplier
    stop_loss = entry_price - sl_distance
    take_profit = entry_price + (sl_distance * tp_multiplier)
    position_size = calculate_position_size(entry_price, stop_loss, risk_amount)
    current_tp := take_profit
    current_sl := stop_loss
    position_active := true
    create_tp_sl_boxes(entry_price, take_profit, stop_loss, true)
    strategy.entry("Long", strategy.long, qty=position_size)
    strategy.exit("Exit Long", "Long", stop=stop_loss, limit=take_profit)
    pending_buy := false
    buy_signal := true

// Lógica de entrada para SHORT (confluencia bajista)
if pending_sell and not na(ms_level) and not ms_bullish and close < ms_level and not confluence_expired
    entry_price = close
    entry_bar := bar_index
    distance_to_box = math.abs(entry_price - confluence_zone_top)
    sl_distance = distance_to_box * stop_loss_multiplier
    stop_loss = entry_price + sl_distance
    take_profit = entry_price - (sl_distance * tp_multiplier)
    position_size = calculate_position_size(entry_price, stop_loss, risk_amount)
    current_tp := take_profit
    current_sl := stop_loss
    position_active := true
    create_tp_sl_boxes(entry_price, take_profit, stop_loss, false)
    strategy.entry("Short", strategy.short, qty=position_size)
    strategy.exit("Exit Short", "Short", stop=stop_loss, limit=take_profit)
    pending_sell := false
    sell_signal := true

if position_active and (close >= current_tp or close <= current_sl or (strategy.position_size == 0 and strategy.position_size[1] != 0))
    position_active := false

if position_active
    update_boxes_extension()

clean_old_zones()
